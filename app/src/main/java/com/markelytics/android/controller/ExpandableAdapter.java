package com.markelytics.android.controller;import android.content.Context;import android.graphics.Typeface;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnTouchListener;import android.view.ViewGroup;import android.widget.BaseExpandableListAdapter;import android.widget.ImageView;import android.widget.TextView;import com.markelytics.android.R;import com.markelytics.android.R.drawable;import com.markelytics.android.model.ExpandableItem;import java.util.ArrayList;import java.util.HashMap;public class ExpandableAdapter extends BaseExpandableListAdapter implements OnTouchListener{	TextView child;	ArrayList<ExpandableItem> headerList;	HashMap<ExpandableItem, ArrayList<String>> childList;	Context context;	int layout_id;		public ExpandableAdapter(Context context, ArrayList<ExpandableItem> listDataHeader,							 HashMap<ExpandableItem, ArrayList<String>> listChildData)	{		this.context = context;		headerList = listDataHeader;		childList = listChildData;	}		@Override	public Object getChild(int groupPosition, int childPosition) 	{		// TODO Auto-generated method stub		return this.childList.get(this.headerList.get(groupPosition))				.get(childPosition);	}		@Override	public long getChildId(int groupPosition, int childPosition) 	{		// TODO Auto-generated method stub		return childPosition;	}		@Override	public View getChildView(int groupPosition, int childPosition,			boolean isLastChild, View convertView, ViewGroup parent) 	{		// TODO Auto-generated method stub		final String childText = (String) getChild(groupPosition, childPosition);		if (convertView == null) {			LayoutInflater infalInflater = (LayoutInflater) this.context					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);			convertView = infalInflater.inflate(R.layout.list_child, null);		}		TextView txtListChild = (TextView) convertView.findViewById(R.id.txtChild);		//txtListChild.setBackgroundColor(context.getResources().getColor(R.color.color_nexpand));		txtListChild.setOnTouchListener(this);		txtListChild.setText(childText);						return convertView;	}		@Override	public int getChildrenCount(int groupPosition)	{		// TODO Auto-generated method stub		return this.childList.get(this.headerList.get(groupPosition)).size();	}		@Override	public Object getGroup(int groupPosition) 	{		// TODO Auto-generated method stub		return this.headerList.get(groupPosition);	}		@Override	public int getGroupCount()	{		// TODO Auto-generated method stub		return this.headerList.size();	}		@Override	public long getGroupId(int groupPosition) 	{		// TODO Auto-generated method stub		return groupPosition;	}		@Override	public View getGroupView(int groupPosition, boolean isExpanded,			View convertView, ViewGroup parent) 	{		// TODO Auto-generated method stub				ExpandableItem header = (ExpandableItem) getGroup(groupPosition);			if (convertView == null) {			LayoutInflater infalInflater = (LayoutInflater) this.context					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);			convertView = infalInflater.inflate(R.layout.list_header, null);		}		TextView lblListHeader = (TextView) convertView.findViewById(R.id.headerTitle);		lblListHeader.setTypeface(null, Typeface.BOLD);		lblListHeader.setText(header.getText());				ImageView img1 = (ImageView)convertView.findViewById(R.id.headerImg1);		img1.setImageResource(header.getImg1());				ImageView img2 = (ImageView)convertView.findViewById(R.id.headerImg2);		//img2.setImageResource(header.getImg2());		if(groupPosition == 0 || groupPosition == 1)		{			img2.setVisibility(View.VISIBLE);			if(isExpanded)		    {				img2.setBackgroundDrawable(context.getResources().getDrawable(drawable.menu_open));		       convertView.setBackgroundColor(context.getResources().getColor(R.color.color_wexpand));		    }		    else		    {		    	img2.setBackgroundDrawable(context.getResources().getDrawable(drawable.menu_close));		        convertView.setBackgroundColor(context.getResources().getColor(R.color.color_nexpand));		    }		}				else if(groupPosition == 2 || groupPosition == 3)		{			//img2.setBackgroundDrawable(context.getResources().getDrawable(drawable.menu_close));			img2.setVisibility(View.GONE);	        convertView.setBackgroundColor(context.getResources().getColor(R.color.color_nexpand));		}						return convertView;	}		@Override	public boolean hasStableIds() 	{		// TODO Auto-generated method stub		return false;	}		@Override	public boolean isChildSelectable(int groupPosition, int childPosition) {		// TODO Auto-generated method stub		return true;	}		@Override	public boolean onTouch(View v, MotionEvent event) {		// TODO Auto-generated method stub		return false;	}	}