package com.markelytics.android.webservice;import android.content.Context;import android.os.AsyncTask;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.widget.Toast;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.NameValuePair;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.conn.ConnectTimeoutException;import org.apache.http.impl.client.DefaultHttpClient;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.net.UnknownHostException;import java.util.List;public class WebserviceWithoutProgressBar {	public static final String baseUrl = "";	private String method;	private List<NameValuePair> param;	private int requestcode;	//	private Handler handler;	CallbackWithoutProgressBar resultCallback;	Context context;	//DataBaseHelper db;	public void getService(Context context, String url, List<NameValuePair> params, int requestCode) {		method = url;		this.param = params;		this.requestcode = requestCode;		this.context =  context;		BackgroundTask background = new BackgroundTask(context);		background.execute();	}	public void getService(Context context, String url, List<NameValuePair> params) {		this.context =  context;				method = url;		this.param = params;		this.requestcode = 0;		BackgroundTask background = new BackgroundTask(context);		background.execute();	}	public WebserviceWithoutProgressBar(CallbackWithoutProgressBar result) {		super();		this.resultCallback = result;	}	private String parsehtml(String json_) {		try {			if (json_.contains("<pre") || json_.contains("<pre>")					|| json_.contains("</pre>")) {				json_ = json_.substring(json_.indexOf("<pre>"),						json_.indexOf("</pre>") + 6);				json_ = json_.replace("</div>", "");				json_ = json_.replace("</pre>", "");			}		} catch (StringIndexOutOfBoundsException e) {			// TODO: handle exception			resultCallback.onError(requestcode, "Unexpected error. Please contact app administrator.");		}		return json_;	}	public void retry() {		if (TextUtils.isEmpty(method)) {			resultCallback.onError(requestcode, "Method empty");		} else {			BackgroundTask background = new BackgroundTask(context);			background.execute();		}	}	class BackgroundTask extends AsyncTask<String, String, String> {		Context context;		public BackgroundTask(Context context) {			super();			this.context = context;		}		//private ProgressDialog process;		@Override		protected void onPreExecute() {			/*System.out.println("Context in Webservice>>>>>>>>>>"+context);			// TODO Auto-generated method stub			if(process == null)				process = new ProgressDialog(context);			process.setMessage("Please wait...");			process.setCancelable(false);			process.show();*/			super.onPreExecute();		}		@Override		protected String doInBackground(String... params) {			// TODO Auto-generated method stub						try {				DefaultHttpClient httpClient = new DefaultHttpClient();				HttpPost httpPost = new HttpPost(method);				//System.out.println("httpPost ---" + httpPost);				httpPost.setEntity(new UrlEncodedFormEntity(param));				//System.out.println("httpPost00 ---" + httpPost);				HttpResponse httpResponse = httpClient.execute(httpPost);				//System.out.println("httpPost11 ---" + httpPost);				HttpEntity httpEntity = httpResponse.getEntity();				InputStream is_ = httpEntity.getContent();				//System.out.println("httpRespnse ---" + httpResponse);				if (httpResponse != null) {					BufferedReader reader = new BufferedReader(new InputStreamReader(is_, "iso-8859-1"), 8);					StringBuilder sb = new StringBuilder();					String line = null;					while ((line = reader.readLine()) != null) {						sb.append(line + "\n");					}					is_.close();					//System.out.println("String ---" + sb);					return sb.toString();				}			}catch(ConnectTimeoutException c){				System.out.println("EX+++++++++++++"+c.getMessage());				//process.dismiss();				resultCallback.onError(requestcode, "Network connection error, Please try again");			}catch(UnknownHostException u){				System.out.println("EX+++++++++++++"+u.getMessage());				//process.dismiss();				resultCallback.onError(requestcode, "Network connection error, Please try again");			}catch (Exception e) {				e.printStackTrace();				System.out.println("EX+++++++++++++"+e.getMessage());				//process.dismiss();				resultCallback.onError(requestcode, "Network connection error, Please try again");			}			return null;		}		private  final Handler mHandler = new  Handler() {			@Override			public  void  handleMessage(Message msg) {				Toast.makeText(context, "NetWork error!", Toast.LENGTH_LONG).show();			} 		}; 		@Override		protected void onPostExecute(String resultstr) {			// TODO Auto-generated method stub						//DataBaseHelper db = new DataBaseHelper(context);			//db.deletePartItemData();						//db.close();			//process.dismiss();			//new cgange for illigal arugument			//process=null;			if (resultstr == null) {				resultCallback.onError(requestcode, "Network connection error, Please try again");				//return;			}else{				try {					//					JSONObject JSONObject = new JSONObject(parsehtml(resultstr));					JSONObject JSONObject = new JSONObject(resultstr);					resultCallback.onSuccess(requestcode, JSONObject);																			} catch (JSONException e) {					// TODO Auto-generated catch block					resultCallback.onError(requestcode, "JSON Parsing Error");					e.printStackTrace();				}catch (Exception e) {					// TODO Auto-generated catch block					resultCallback.onError(requestcode, "Unexpected error. Please contact app administrator.");					e.printStackTrace();				}			}			super.onPostExecute(resultstr);		}	}	public static interface CallbackWithoutProgressBar {		public void onSuccess(int reqestcode, JSONObject rootjson);		public void onError(int reqestcode, String error);					}}